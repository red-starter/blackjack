// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.Game = (function(superClass) {
    extend(Game, superClass);

    function Game() {
      return Game.__super__.constructor.apply(this, arguments);
    }

    Game.prototype.defaults = {
      winner: "none",
      gameOver: null,
      metaData: ""
    };

    Game.prototype.initialize = function() {
      var dealerHand, deck, playerHand;
      this.set('deck', deck = new Deck());
      this.set('playerHand', playerHand = deck.dealPlayer());
      this.set('dealerHand', dealerHand = deck.dealDealer());
      this.get('playerHand').on('stand', (function(_this) {
        return function() {
          return _this.standHandler();
        };
      })(this));
      return this.get('playerHand').on('hit', (function(_this) {
        return function() {
          return _this.hitHandler();
        };
      })(this));
    };

    Game.prototype.standHandler = function() {
      var dealerHand;
      dealerHand = this.get('dealerHand');
      dealerHand.at(0).flip();
      while (!(dealerHand.scores()[0] >= 17 || (dealerHand.scores()[1] >= 17 && dealerHand.scores()[1] <= 21))) {
        dealerHand.hit();
      }
      return this.findWinner();
    };

    Game.prototype.hitHandler = function() {
      var playerHand;
      playerHand = this.get('playerHand');
      if (playerHand.scores()[0] > 21) {
        return this.set('winner', 'dealerHand');
      }
    };

    Game.prototype.findWinner = function() {
      var dealerHand, maxDealer, maxPlayer, playerHand;
      playerHand = this.get('playerHand');
      dealerHand = this.get('dealerHand');
      if (playerHand.scores()[0] > 21) {
        return this.set('winner', 'dealer');
      } else if (dealerHand.scores()[0] > 21) {
        return this.set('winner', 'player');
      } else {
        maxPlayer = playerHand.scores()[1] <= 21 ? playerHand.scores()[1] : playerHand.scores()[0];
        maxDealer = dealerHand.scores()[1] <= 21 ? dealerHand.scores()[1] : dealerHand.scores()[0];
        return this.set('winner', maxPlayer > maxDealer ? 'player' : 'dealer');
      }
    };

    return Game;

  })(Backbone.Model);

}).call(this);

//# sourceMappingURL=Game.js.map
