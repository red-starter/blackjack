// Generated by CoffeeScript 1.10.0
(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  window.AppView = (function(superClass) {
    extend(AppView, superClass);

    function AppView() {
      return AppView.__super__.constructor.apply(this, arguments);
    }

    AppView.prototype.className = 'app';

    AppView.prototype.template = _.template('<div class="points">You have <%= points %> points</div> <input type="Number" value=<%= betSize %> class="betting-input"> <button class="hit-button">Hit</button><button class="stand-button">Stand</button> <div class="game-view-container"></div>');

    AppView.prototype.events = {
      'click .hit-button': function() {
        return this.hitButtonHandler();
      },
      'click .stand-button': function() {
        this.setBetSize();
        return this.model.get('game').get('playerHand').stand();
      },
      'click .refresh-button': function() {
        this.$el.find('.refresh').remove();
        return this.render();
      }
    };

    AppView.prototype.setBetSize = function() {
      var betSize;
      betSize = parseInt($('.betting-input').val()) || 1;
      return this.model.set('betSize', betSize);
    };

    AppView.prototype.hitButtonHandler = function() {
      this.setBetSize();
      return this.model.get('game').get('playerHand').hit();
    };

    AppView.prototype.initialize = function() {
      this.model.on('change:points', (function(_this) {
        return function() {
          return _this.renderEndGame();
        };
      })(this));
      return this.render();
    };

    AppView.prototype.renderEndGame = function() {
      this.render();
      this.$el.find('.stand-button').after('<button class="refresh-button">Play again</button>');
      this.$el.find('.hit-button').hide();
      this.$el.find('.stand-button').hide();
      this.$el.find('.betting-input').hide();
      return this.model.makeGame();
    };

    AppView.prototype.render = function(end) {
      this.$el.children().detach();
      this.$el.html(this.template(this.model.attributes));
      return this.$('.game-view-container').html(new GameView({
        model: this.model.get('game')
      }).el);
    };

    return AppView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=AppView.js.map
